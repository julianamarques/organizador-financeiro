swagger: "2.0"
info:
  description: "API pra controle e organização financeira, onde podem ser feitos registros de saldo em cada uma das contas, registro de fatura, lançamento de receitas e despesas. Projeto: https://github.com/julianamarques/organizador-financeiro-api"
  version: "1.0.0"
  title: "Organizador Financeiro API"
  contact:
    email: "paulo.rob159@gmail.com"
host: "localhost:800"
basePath: "/v2"
tags:
- name: "cartões"
  description: "Controle de cartões"
- name: "usuario"
  description: "Operações com usuários (Apenas para Admin)"
- name: "faturas"
  description: "Operações com faturas"
- name: "lancamentos"
  description: "Controle de lançamentos"
- name: "contas"
  description: "Controle de contas"
schemes:
- "https"
- "http"
paths:
  /cartoes/:
    post:
      tags:
      - "cartões"
      summary: "Adiciona um novo cartão"
      description: ""
      operationId: "addPet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Campos do cartão"
        required: true
        schema:
          $ref: "#/definitions/Cartao"
      responses:
        201:
          description: "Cartão criado com sucesso."
        405:
          description: "Invalid input"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    get:
      tags:
      - "cartões"
      summary: "Obtém todos os cartões do usuário"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Opereção realizada com sucesso !"
          schema:
            $ref: '#/definitions/Cartao'
        401:
          description: "Você não tem autorização para isso"
  /cartoes/{Id}:
    get:
      tags:
      - "cartões"
      summary: "Obtém um cartão"
      description: "Retorna um único cartão"
      operationId: "getCartaoById"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID do cartão"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cartao"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Pet not found"
      security:
      - api_key: []
    delete:
      tags:
      - "cartões"
      summary: "Deleta um cartão"
      description: ""
      operationId: "deleteCartao"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Id do cartão"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operação realizada com sucesso !"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Cartão não encontrado"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "cartões"
      summary: "Atualiza um cartão"
      description: ""
      operationId: "updatePet"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Pet object that needs to be added to the store"
        required: true
        schema:
          $ref: "#/definitions/Cartao"
      responses:
        400:
          description: "ID inválido"
        404:
          description: "Cartão não encontrado"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
  /faturas/:
    post:
      tags:
        - "faturas"
      summary: "Nova fatura"
      description: ""
      operationId: "addFatura"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Campos da fatura"
        required: true
        schema:
          $ref: "#/definitions/Fatura"
      responses:
        201:
          description: "Nova fatura criada."
        405:
          description: "Invalid input"
    get:
      tags:
      - "faturas"
      summary: "Obtém todas as faturas"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Opereção realizada com sucesso !"
          schema:
            $ref: '#/definitions/Fatura'
        401:
          description: "Você não tem autorização para isso"
  /faturas/{Id}:
    get:
      tags:
      - "faturas"
      summary: "Obtém uma fatura"
      description: "Retorna uma única fatura"
      operationId: "getFaturabyId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID da fatura"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "operação realizada com sucesso"
          schema:
            $ref: "#/definitions/Fatura"
        400:
          description: "Id inválido"
        404:
          description: "Fatura não encontrada"
      security:
      - api_key: []
    delete:
      tags:
      - "faturas"
      summary: "Deleta uma fatura"
      description: ""
      operationId: "deleteFatura"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Id da fatura"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operação realizada com sucesso!"
        400:
          description: "Id inválido"
        404:
          description: "Fatura não encontrada"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "faturas"
      summary: "Atualiza uma fatura"
      description: ""
      operationId: "updateFatura"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Campos da fatura"
        required: true
        schema:
          $ref: "#/definitions/Fatura"
      responses:
        400:
          description: "ID inválido"
        404:
          description: "Fatura não encontrada"
  /lancamentos/:
    post:
      tags:
        - "lancamentos"
      summary: "Novo lançamento"
      description: ""
      operationId: "addLancamento"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Campos do lançamento"
        required: true
        schema:
          $ref: "#/definitions/Lancamento"
      responses:
        201:
          description: "Novo lançamento criado."
        405:
          description: "Invalid input"
    get:
      tags:
      - "lancamentos"
      summary: "Obtém todos os lançamentos"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Opereção realizada com sucesso !"
          schema:
            $ref: '#/definitions/Lancamento'
        401:
          description: "Você não tem autorização para isso"
  /lancamentos/{Id}:
    get:
      tags:
      - "lancamentos"
      summary: "Obtém um lançamento"
      description: "Retorna um único lançamento"
      operationId: "getLancamentobyId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID do lançamento"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "operação realizada com sucesso"
          schema:
            $ref: "#/definitions/Lancamento"
        400:
          description: "Id inválido"
        404:
          description: "Lançamento não encontrado"
      security:
      - api_key: []
    delete:
      tags:
      - "lancamentos"
      summary: "Deleta um lançamento"
      description: ""
      operationId: "deleteLancamento"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Id do lançamento"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operação realizada com sucesso!"
        400:
          description: "Id inválido"
        404:
          description: "Lançamento não encontrado"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "lancamentos"
      summary: "Atualiza um lançamento"
      description: ""
      operationId: "updateLancamento"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Campos do lançamento"
        required: true
        schema:
          $ref: "#/definitions/Lancamento"
      responses:
        400:
          description: "ID inválido"
        404:
          description: "Lançamento não encontrado"
  /conta/:
    post:
      tags:
        - "contas"
      summary: "Nova conta"
      description: "Cria uma nova conta bancária"
      operationId: "addConta"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Campos da conta"
        required: true
        schema:
          $ref: "#/definitions/Conta"
      responses:
        201:
          description: "Nova conta criada."
        405:
          description: "Invalid input"
    get:
      tags:
      - "contas"
      summary: "Obtém todas as contas"
      description: ""
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Opereção realizada com sucesso !"
          schema:
            $ref: '#/definitions/Lancamento'
        401:
          description: "Você não tem autorização para isso"
    
  /conta/{Id}:
    get:
      tags:
      - "contas"
      summary: "Obtém uma conta"
      description: "Retorna uma única conta"
      operationId: "geContabyId"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "ID da conta"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "operação realizada com sucesso"
          schema:
            $ref: "#/definitions/Conta"
        400:
          description: "Id inválido"
        404:
          description: "Conta não encontrada"
      security:
      - api_key: []
    delete:
      tags:
      - "contas"
      summary: "Deleta uma conta"
      description: ""
      operationId: "deleteConta"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        description: "Id da conta"
        required: true
        type: "integer"
        format: "int64"
      responses:
        200:
          description: "Operação realizada com sucesso!"
        400:
          description: "Id inválido"
        404:
          description: "Conta não encontrada"
      security:
      - petstore_auth:
        - "write:pets"
        - "read:pets"
    put:
      tags:
      - "contas"
      summary: "Atualiza uma conta"
      description: ""
      operationId: "updateConta"
      consumes:
      - "application/json"
      - "application/xml"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "Id"
        in: "path"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Campos da conta"
        required: true
        schema:
          $ref: "#/definitions/Conta"
      responses:
        400:
          description: "ID inválido"
        404:
          description: "Conta não encontrada"
    
  /usuarios/:
    post:
      tags:
      - "usuario"
      summary: "Cria um usuário"
      description: "Essa operação só pode ser realizada se logado como Admin."
      operationId: "createUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - in: "body"
        name: "body"
        description: "Usuario criado"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        201:
          description: "Usuário criado com sucesso!"
        400:
          description: "Erro ao criar usuário"
    get:
      tags:
      - "usuario"
      summary: "Obtém todos os usuários"
      description: "Essa operação só pode ser realizada se logado como Admin"
      produces:
      - "application/xml"
      - "application/json"
      responses:
        200:
          description: "Opereção realizada com sucesso !"
          schema:
            $ref: '#/definitions/User'
        401:
          description: "Você não tem autorização para isso"
  /auth/login:
    post:
      tags:
      - "usuario"
      summary: "Obtém o token o JWT do usuário e loga o no sistema"
      description: ""
      operationId: "loginUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "nome"
        in: "query"
        description: "Nome do usuário pra login"
        required: true
        type: "string"
      - name: "email"
        in: "query"
        description: ""
        required: true
        type: "string" 
      - name: "senha"
        in: "query"
        description: ""
        required: true
        type: "string"
      responses:
        200:
          description: "token_do_usuário"
          schema:
            type: "string"
          headers:
            X-Rate-Limit:
              type: "integer"
              format: "int32"
              description: "número de requests por hora permitidos pelo usuário"
            X-Expires-After:
              type: "string"
              format: "date-time"
              description: "data expiração do Token"
        400:
          description: "Senha ou email inválido"
  /usuarios/{id}:
    get:
      tags:
      - "usuario"
      summary: "Obtém usuário pelo Id"
      description: ""
      operationId: "getUserByName"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "O nome do usuário. Use user1 para teste. "
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
        400:
          description: "Campos inválidos"
        404:
          description: "Usuário não encontrado"
        401:
          description: "Você não possui autorização para isso."
    put:
      tags:
      - "usuario"
      summary: "Update no usuario"
      description: "Só pode ser realizado com usuáiro logado."
      operationId: "updateUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id do usuário a ser atualizado"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Campos para atualização"
        required: true
        schema:
          $ref: "#/definitions/User"
      responses:
        400:
          description: "Informações inválidas"
        404:
          description: "Usuário não encontrado"
        401:
          description: "Você não possui autorização para isso."
    delete:
      tags:
      - "usuario"
      summary: "Deleta usuário"
      description: "Só pode ser realizado com usuário logado"
      operationId: "deleteUser"
      produces:
      - "application/xml"
      - "application/json"
      parameters:
      - name: "id"
        in: "path"
        description: "Id do usuário que será deletado"
        required: true
        type: "string"
      responses:
        404:
          description: "Usuário não encontrado"
        401:
          description: "Você não possui autorização para isso."
securityDefinitions:
  petstore_auth:
    type: "oauth2"
    authorizationUrl: "http://petstore.swagger.io/oauth/dialog"
    flow: "implicit"
    scopes:
      write:pets: "modify pets in your account"
      read:pets: "read your pets"
  api_key:
    type: "apiKey"
    name: "api_key"
    in: "header"
definitions:
  Lancamento:
    type: "object"
    properties:
      valor:
        type: "integer"
        format: "int64"
      descricao:
        type: "string"
      categoria:
        type: "string"
      data:
        type: "string"
      conta:
        $ref: "#/definitions/Conta"
      fatura:
        $ref: '#/definitions/Fatura'
    xml:
      name: "Lancamento"
  Conta:
    type: "object"
    properties:
      saldo:
        type: "number"
      nome:
        type: "string"
      tipo:
        type: "string"
      instituicao:
        type: "string"
      usuario:
        $ref: '#/definitions/User'
    xml:
      name: "Conta"
  Cartao:
    type: "object"
    properties:
      limite:
        type: "number"
      numero:
        type: "number"
      tipo:
        type: "string"
      bandeira:
        type: "string"
      dia_encerramento_fatura:
        type: "string"
      dia_vencimento_fatura:
        type: "string"
      conta:
        $ref: '#/definitions/Conta'
      usuario:
        $ref: '#/definitions/User'
    xml:
      name: "Cartao"
  Fatura:
    type: "object"
    properties:
      conta:
        $ref: '#/definitions/Conta'
      referencia:
        type: "string"
      valor:
        type: "number"
    xml:
      name: "Fatura"
  User:
    type: "object"
    properties:
      id:
        type: "integer"
        format: "int64"
      nome:
        type: "string"
      genero:
        type: "string"
      email:
        type: "string"
      password:
        type: "string"
    xml:
      name: "User"
  ApiResponse:
    type: "object"
    properties:
      code:
        type: "integer"
        format: "int32"
      type:
        type: "string"
      message:
        type: "string"
externalDocs:
  description: "Mais sobre a API"
  url: "https://github.com/julianamarques/organizador-financeiro-api"